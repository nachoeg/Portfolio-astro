---
import SunIcon from "../icons/Sun.astro";
import MoonIcon from "../icons/Moon.astro";
import SystemIcon from "../icons/System.astro";
import Tooltip from "./Tooltip.astro";

const THEMES = ["Light", "Dark", "System"];
---

<div class="relative ml-1 mr-1">
  <Tooltip content="Cambiar tema">
    <button
      id="theme-toggle-btn"
      class="appearance-none border-none flex transition-all p-1 rounded-full duration-100
      hover:scale-125 active:scale-100 hover:text-black hover:bg-white hover:shadow
      dark:hover:text-white dark:hover:bg-white/10
       focus:scale-125 focus:text-black focus:bg-white focus:shadow
      dark:focus:text-white dark:focus:bg-white/10"
      data-tooltip-target="theme-toggle-tooltip"
    >
      <span class="sr-only">Cambiar tema</span>
      <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
      <MoonIcon
        id="dark"
        class="theme-toggle-icon absolute size-5 transition-all"
      />
      <SystemIcon
        id="system"
        class="theme-toggle-icon absolute size-5 transition-all"
      />
    </button>
  </Tooltip>
</div>

<div
  id="themes-menu"
  class="absolute hidden scale-80 top-14 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white dark:bg-neutral-900 dark:border-neutral-500/20 shadow[0_3px_10px_rgb(0,0,0,0.2)]"
>
  <ul>
    {
      THEMES.map((theme) => (
        <li class="themes-menu-option px-2 py-1.5 cursor-default rounded hover:bg-neutral-300/50 dark:hover:bg-neutral-700/50 ">
          {theme}
        </li>
      ))
    }
  </ul>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>
<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  // const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const initializeButton = () => {
    const themesMenu = document.getElementById("themes-menu");

    document.addEventListener("click", () =>
      themesMenu.classList.remove("open")
    );

    document
      .getElementById("theme-toggle-btn")
      .addEventListener("click", (e) => {
        e.stopPropagation();
        const isClosed = !themesMenu.classList.contains("open");
        themesMenu.classList[isClosed ? "add" : "remove"]("open");
      });

    document.querySelectorAll(".themes-menu-option").forEach((element) => {
      element.addEventListener("click", (e) => {
        localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
        updateTheme();
      });
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  document.addEventListener("astro:after-swap", updateTheme);
  document.addEventListener("astro:page-load", initializeButton);
  // document.addEventListener("DOMContentLoaded", initialize);
</script>
