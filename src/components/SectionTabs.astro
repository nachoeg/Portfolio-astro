---
import ProfileFilled from "@/icons/ProfileFilled.astro";
import Code from "../icons/Code.astro";
import CodeFilled from "../icons/CodeFilled.astro";
import Mail from "../icons/Mail.astro";
import MailFilled from "../icons/MailFilled.astro";
import Profile from "../icons/Profile.astro";
const navItems = [
  {
    title: "Proyectos",
    label: "projects",
    icon: Code,
    iconFilled: CodeFilled,
    url: "/#projects",
  },
  {
    title: "Sobre m√≠",
    label: "about",
    icon: Profile,
    iconFilled: ProfileFilled,
    url: "/#about",
  },
  {
    title: "Contacto",
    label: "contact",
    icon: Mail,
    iconFilled: MailFilled,
    url: "/#contact",
  },
];
const { classList } = Astro.props;
---

<div
  class=`relative flex font-medium rounded-full justify-around w-full items-center  ${classList}`
>
  {
    navItems.map((link) => (
      <a
        class=" w-[5rem] xs:w-24  sm:w-28  text-center py-2 flex flex-col gap-2   hover:text-black dark:hover:text-white  active:scale-95 duration-100  items-center  justify-center  text-nowrap  transition-all nav-item "
        aria-label={link.label}
        href={link.url}
      >
        <link.icon class="sm:hidden size-5 icon" />
        <link.iconFilled class="hidden size-5 icon-filled" />
        <span class="text-xs sm:text-base">{link.title}</span>
      </a>
    ))
  }
  <div
    class="backgroundSelected h-1/2 top-[3px] sm:top-0 sm:mx-0 w-[13%] sm:h-full sm:w-1/3 left-[10%] sm:left-0 rounded-full shadow bg-white dark:bg-white/10"
  >
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll(".nav-item");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("selected");
            } else {
              item.classList.remove("selected");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.2,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  .selected {
    @apply text-black dark:text-white;
  }

  .selected .icon {
    display: none;
  }

  .selected .icon-filled {
    display: block;
  }

  @media (min-width: 640px) {
    .selected .icon-filled {
      display: none;
    }
  }

  [aria-label="projects"]:is(.selected) ~ .backgroundSelected {
    left: 10%;
  }

  [aria-label="about"]:is(.selected) ~ .backgroundSelected {
    left: 43.33%;
  }

  [aria-label="contact"]:is(.selected) ~ .backgroundSelected {
    left: 76.66%;
  }

  @media (min-width: 640px) {
    [aria-label="projects"]:is(.selected) ~ .backgroundSelected {
      left: 0;
    }

    [aria-label="about"]:is(.selected) ~ .backgroundSelected {
      left: 33.3%;
    }

    [aria-label="contact"]:is(.selected) ~ .backgroundSelected {
      left: 66.6%;
    }
  }
  .backgroundSelected {
    /* height: 100%;
    width: 33%; */
    position: absolute;
    pointer-events: none;
    z-index: -1;
    box-sizing: border-box;
    transition-duration: 0.3s, 0.1s;
    transition-property: all, scale;
    transition-timing-function: cubic-bezier(0.51, 0, 0.44, 1.28);
    animation: reveal-background 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 200px;
    opacity: 0;
  }

  .selected:active ~ .backgroundSelected {
    scale: 0.95;
  }
</style>
